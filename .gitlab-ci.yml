############################################################
############################################################

# include:
#   - project: sre/gitlab-ci-include-files/et/et-aws-jwt-gitlab-ci
#     ref: 0.3.0
#     file: AWS-JWT.gitlab-ci.yml


.env_CICD: 
    variables:
        CICD_STATE_S3_BUCKET: "terraform-main-infra-setup"
        AWS_DEFAULT_REGION: us-east-1
        ACCOUNT_NUM_DEV: "025971059211"
        KUBERNETES_HELPER_MEMORY_REQUEST: "700Mi"
        KUBERNETES_HELPER_MEMORY_LIMIT: "700Mi"
        KUBERNETES_CPU_REQUEST: "500m"
        KUBERNETES_CPU_LIMIT: "500m"
        KUBERNETES_MEMORY_REQUEST: "700Mi"
        KUBERNETES_MEMORY_LIMIT: "700Mi"
        CLOUDFRONT_DISTRIBUTION_ID: "EU7ID9E6B0YQW"
        DOCKER_REGISTRY: "553059057272.dkr.ecr.us-east-1.amazonaws.com"
        APP_NAME: "mysitedomains-static-website"

# global rule to only run on main branch
workflow:
    rules:
        - if: '$CI_COMMIT_BRANCH == "main"'


#Begin:
#    script: echo 'Started !!!!!!'

# # # ################################################################
1.0-Dev:BuildDockerImage:
    extends:  [.env_CICD]
    image:
      name: docker:20.10.16
    services:
    - docker:20-dind
    before_script:
      - apk add --no-cache curl jq python3 py3-pip
      - pip install awscli
      - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    script:
      - cd extras/lambdas/transcribe_SP
      - docker build -t $DOCKER_REGISTRY/$APP_NAME:latest .
      - docker push $DOCKER_REGISTRY/$APP_NAME:latest

1.1-Dev:lambdaDeploy:
    extends:  [.env_CICD]
    needs: [1.0-Dev:BuildDockerImage]
    image:
      name: hashicorp/terraform:light
      entrypoint:
        - '/usr/bin/env'
        - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
        - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
        - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
        - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
    script:
        - cd infra/api_gateway_lambda && echo "********PWD*******" && pwd && terraform init -backend-config="bucket=${CICD_STATE_S3_BUCKET}" -force-copy && terraform validate && terraform plan -var-file="mysitedomains_lambda.tfvars"
        - terraform apply -var-file="mysitedomains_lambda.tfvars" -auto-approve
        - OUTPUT_VALUE=$(terraform output -raw api_endpoint)
        - export VITE_API_GATEWAY=$(echo $OUTPUT_VALUE | sed 's/\/api$//')
        - echo "VITE_API_GATEWAY=${VITE_API_GATEWAY}" >> deploy_env_vars.txt
    artifacts:
      paths:
        - "infra/api_gateway_lambda/deploy_env_vars.txt"

1.2-Dev:Build:
    extends:  [.env_CICD]
    image:
      name: node:latest
    needs: [1.1-Dev:lambdaDeploy]
    before_script:
        - cp -r /builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/infra/api_gateway_lambda/deploy_env_vars.txt .
    script:
        - VITE_API_GATEWAY=$(grep "^VITE_API_GATEWAY=" deploy_env_vars.txt | cut -d '=' -f2)
        - echo VITE_API_GATEWAY
        - cd apps/react-app
        - npm install --legacy-peer-deps && npm run build
    artifacts:
      paths:
        - apps/react-app/dist

1.3-Dev:Deploy:
    extends:  [.env_CICD]
    needs: [1.2-Dev:Build]
    #image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    image:
      name: hashicorp/terraform:light
      entrypoint:
        - '/usr/bin/env'
        - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
        - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
        - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
        - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
    script:
        # - pwd && ls
        # - aws s3 ls
        - mkdir -p /apps/react-app/dist
        - cp -r /builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/apps/react-app/dist/* /apps/react-app/dist/
        - cd infra && echo "********PWD*******" && pwd && terraform init -backend-config="bucket=${CICD_STATE_S3_BUCKET}" -force-copy && terraform validate && terraform plan -var-file="mydomainsites_app.tfvars" #-var="account_id=${ACCOUNT_NUM_DEV}" -var="vpc_id=vpc-0b414d50fa7158b64" -var="subnet_id_1=subnet-0f397bb49176dd885" -var="subnet_id_2=subnet-0bdf96a7fa5693768" -var="subnet_id_3=subnet-0a9564ae74c9ab56e" -target=module.ECR -target=module.ECS -target=module.ECS-SecurityGroups -target=module.ECR_Postgraphile -target=module.ELK -target=module.ELK-Cloudwatch-Lambda
        - terraform apply -var-file="mydomainsites_app.tfvars" -auto-approve

1.4-Dev:Post:
  extends: [.env_CICD]
  needs: [1.3-Dev:Deploy]
  image:
    name: amazon/aws-cli:2.2.18
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' 
      - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' 
      - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
  script:
    - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths '/*'

